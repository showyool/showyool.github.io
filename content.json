{"meta":{"title":"Showyool's Blog","subtitle":"","description":"真知灼见出实战","author":"Showyool","url":"https://showyool.github.io","root":"/"},"pages":[],"posts":[{"title":"可能我这辈子也不会用Guava的Partition了","slug":"6881281564060155912","date":"2020-10-08T08:12:40.000Z","updated":"2020-10-22T18:46:34.069Z","comments":true,"path":"2020/10/08/6881281564060155912/","link":"","permalink":"https://showyool.github.io/2020/10/08/6881281564060155912/","excerpt":"","text":"又写BUG了上回书说道，我写的《这可能是你从未见过如此优雅的写法》里面的方法是为了将非业务和业务逻辑进行解耦出来，于是周围小伙伴觉得不错也都开始使用起来，这颇让人感到很有成就感。于是大家都开始纷纷使用起来。既然话已经说到了这里，想必各位也已经知道接下来肯定是搞出了bug。 故事的开始有一天，突然有个小伙伴说，有一个查询商品的dubbo接口报了NoSuchElementException的错误，然后在kibana的堆栈日志这边看到的是我之前提供的那个公共方法的一行，这就引起了我的注意那么我们来看看这是在哪一行 常见的NoSuchElementException原因NoSuchElementException这个错误是不是十分眼熟？没错，各位有心的话，在网上会搜到很多这种错误，无非就是在循环迭代中多次使用了next()的原因，例如: 12345678910List&lt;String&gt; list = new ArrayList&lt;&gt;();list.add(&quot;wo&quot;);list.add(&quot;ni&quot;);list.add(&quot;ta&quot;);System.out.println(list);Iterator&lt;String&gt; iterator = list.iterator();while (iterator.hasNext()) &#123; iterator.next(); System.out.println(iterator.next());&#125; 我们可以深入一下看看这个ArrayList里面的第862行（本人使用的JDK版本为1.8.181，不同版本之间的行数可能不一样）可以看到这里在执行next()方法的时候，会进行游标数的检查。可以发现，在上面的例子中，由于每次for循环当中多执行了一次next()，使得每次循环的游标移动了两次，所以就会造成这个问题。具体的各位可以自己DEBUG看看。 回归主线那么，这次的原因是不是也是这个地方发生的呢，由于公司政策要求，我这边就不方便贴出相关的业务代码（这可是要被开除的），但是这边也没有使用迭代器的循环写法，而是用了简单的增强for循环，也就不会出现像上面的多次调用next()的情况。于是只好本地进行模拟: 1234567891011public static void main(String[] args) &#123; List&lt;String&gt; all = Lists.newArrayList(&quot;ki1&quot;); Map&lt;String, Object&gt; map = new CommonDoPartition&lt;&gt;().partitionToQuery4Map(500, all, outerIds -&gt; returnMap(outerIds)); System.out.println(JSON.toJSONString(map));&#125;public static Map&lt;String, Object&gt; returnMap(List&lt;String&gt; all) &#123; Map&lt;String, Object&gt; map = Maps.newHashMap(); map.put(&quot;ki1&quot;, &quot;ki1&quot;); return map;&#125; 运行之后发现，并没有报错。这可真的是吓坏本宝宝了。在那个出错的代码当中，也只是在lambda表达式中调用一个业务方法。其他的部分完全一致，那么根据控制变量法（当然，运行的机器、容器、环境等这些暂时先不考虑），是不是出问题的地方在于这个业务代码呢，于是拉着小伙伴看了下这里面的业务逻辑。果真，发现了一些端倪。在这里业务代码中，有对这个入参的all进行过删减，于是我也进行一波小小的测试: 123456789101112public static void main(String[] args) &#123; List&lt;String&gt; all = Lists.newArrayList(&quot;ki1&quot;); Map&lt;String, Object&gt; map = new CommonDoPartition&lt;&gt;().partitionToQuery4Map(500, all, outerIds -&gt; returnMap(outerIds)); System.out.println(JSON.toJSONString(map));&#125;public static Map&lt;String, Object&gt; returnMap(List&lt;String&gt; all) &#123; Map&lt;String, Object&gt; map = Maps.newHashMap(); all.remove(&quot;ki1&quot;); map.put(&quot;ki1&quot;, &quot;ki1&quot;); return map;&#125; 果然报了这个错误，这个和kibana上面的错误是一样的。那么接下来我们来深入一下代码，为什么会发生这样的错误。 增强的for循环增强的for循环在我们的日常书写中是十分常见的写法，当我们不关心list当中的序列而只是依次迭代遍历对象的时候，就会使用这种写法。当然这只是JVM层面将其包装成固定的写法罢了，在具体的解释上，依旧还是依据迭代器的流程。例如这样一段简单的代码: 1234List&lt;Integer&gt; list = Lists.newArrayList(1,2,3);for (Integer i : list) &#123; System.out.println(i);&#125; 通过javap的解释之后，截取部分图片可以看到，这里还是使用迭代器的写法去进行遍历，通过next()方法获取到对象。 继续回归主线但是为什么要讲述上面这些东西呢？我们来看下报错这边的信息，可以看到最后一行的堆栈是停留在 1234Exception in thread &quot;main&quot; java.util.NoSuchElementException at java.util.AbstractList$Itr.next(AbstractList.java:364) at com.example.demo.consume.CommonDoPartition.partitionToQuery4Map(CommonDoPartition.java:67) at com.example.demo.consume.CommonDoPartition.main(CommonDoPartition.java:78) 看看AbstractList的364行可以看到，这里是因为报了IndexOutOfBoundsException的异常，然后抛出了NoSuchElementException异常。不同于常见的NoSuchElementException异常错误（示例1的代码），这里是使用了内部类当中的next()方法。那么既然会报错这个错误，问题就在于这里面的get方法。这里的get方法是一个抽象类 123456/** * &#123;@inheritDoc&#125; * * @throws IndexOutOfBoundsException &#123;@inheritDoc&#125; */abstract public E get(int index); 那么我们可以使用IDEA的Diagrams功能可以看一下继承关系看一下get的实现 1234567891011@Override public List&lt;T&gt; get(int index) &#123; checkElementIndex(index, size());// 进行安全检查 int start = index * size; int end = Math.min(start + size, list.size()); return list.subList(start, end);// 通过subList进行部分数据的截取&#125;// 获取size大小，这里其实是向上取整@Override public int size() &#123; return IntMath.divide(list.size(), size, RoundingMode.CEILING);&#125; 那么造成IndexOutOfBoundsException异常也是由于checkElementIndex这个方法抛出来的 12345678public static int checkElementIndex( int index, int size, @Nullable String desc) &#123; // Carefully optimized for execution by hotspot (explanatory comment above) if (index &lt; 0 || index &gt;= size) &#123; throw new IndexOutOfBoundsException(badElementIndex(index, size, desc)); &#125; return index;&#125; 看到这里是不是就突然明白了！Guava当中Partition的做法是通过一整个list的数据截取，其实也是一种分页的处理方式。那么倘若在后续的业务代码中对这一整个数据进行了删减，那么这里的size()的取值就不准了,造成整个get的数据就不符预测值了。 总结那么现在我们来总结一下这里的流程: 增强的for循环会解释成hasNext()和next()进行迭代遍历； next()当中的get()方法其实是进行list元素列表的数据截取，可理解为分页； get()方法会进行数组越界判断，当list数据删减的时候，size()方法的返回值不是固定值。 每一次迭代都会将游标cursor进行+1，当list数据删减的时候，调用get()进行数组越界判断就会发生IndexOutOfBoundsException异常，继而在next()方法当中抛出NoSuchElementException异常。 解决解决的思路无非是两点: 控制业务调用层面禁止对原数据列表的删除。（但是由于业务场景的复杂性，这点比较难以控制，所以不太推荐) 在这种场景下不再使用Guava的Partition，自己改写一份数据分隔的工具类。 可以发现，Guava的数据自始至终只有一份，也没有对原数据进行保护，就会造成下游业务对源数据进行破坏。那么也给了我们一个思路，那就是需要为原数据留下一个备份。所以我自己又写了一个工具类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475import java.util.*;public class SubListIterator&lt;T&gt; implements Iterator &#123; /** * 原数据列表 */ private List&lt;T&gt; dataList; /** * 分隔单位 */ private int subSize; private volatile int nextIndex = 0; private int listSize; private List&lt;List&lt;T&gt;&gt; subLists = new ArrayList&lt;&gt;(); public SubListIterator(List&lt;T&gt; dataList, int subSize)&#123; if(dataList != null)&#123; listSize = dataList.size(); &#125; this.dataList = dataList; this.subSize = subSize; initSubLists(); &#125; private void initSubLists()&#123; if(listSize &lt;= 0)&#123; return; &#125; int index = 1; Iterator&lt;T&gt; iterator = dataList.iterator(); List&lt;T&gt; subDataList = new ArrayList(); while(iterator.hasNext())&#123; T next = iterator.next(); subDataList.add(next); if (index % subSize == 0 || listSize == index) &#123; subLists.add(subDataList); subDataList = new ArrayList(); &#125; index++; &#125; &#125; @Override public boolean hasNext() &#123; return subLists.size() &gt; nextIndex; &#125; @Override public Object next() &#123; if(hasNext()) &#123; return subLists.get(nextIndex++); &#125; return null; &#125; @Override public void remove() &#123; new UnsupportedOperationException(&quot;不支持该操作&quot;); &#125;&#125; 这里也附上我的Github地址:https://github.com/showyool/juejin.git ## 最后 感谢各位能够看到这里，以上就是我处理这个bug的全部过程。今后还会继续分享我所发现的bug以及知识点，如果我的文章对你有所帮助，还希望各位大佬$\\color{red}{点个关注}$$\\color{red}{点个赞}$，再次感谢大家的支持！","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://showyool.github.io/tags/Java/"}]},{"title":"这可能是你从未见过如此优雅的写法","slug":"6875124241813995533","date":"2020-09-21T17:53:52.000Z","updated":"2020-10-22T18:43:51.693Z","comments":true,"path":"2020/09/22/6875124241813995533/","link":"","permalink":"https://showyool.github.io/2020/09/22/6875124241813995533/","excerpt":"","text":"前言看到这样的标题，第一反应是不是那个“渣渣辉”在电脑屏幕中挥舞着大砍刀，听着古天乐说着，“这是你从未玩过的全新版本”。当然，这并不是标题党，既然“这是你从未玩过的全新版本”，那么“是兄弟就来看我的文章”。（不是兄弟也请留步，嘤嘤嘤） 背景在对公司一个几百年没有更新维护旧项目进行功能开发的时候，由于当初开发这个项目的人早已各奔前程，也没有留下什么可视性的文档，所以只能从一些代码以及注释中尽可能地摸索这个项目的系统架构以及对应的业务功能，这无疑是一件十分头疼的事情（看别人的代码和看几个月前自己的代码就像是闻SHI一样）。看了几遍下来，大多数的代码写的都不堪直视，甚至连基本的格式化代码也没有，但是其中有一段的代码却引起了我的注意，也是因为这段代码才引起了我的思考，也是就有了这篇文章。 到底是什么样的代码呢话不多说，直接上代码: 1234567new AbstractSpinBusiness() &#123; @Override protected boolean handle() &#123; CompanyProfile updateProfile = getProfileForUpdateConf(staff, attrMap); return companyProfileDao.updateCompanyProfileConf(updateProfile) &gt; 0; &#125;&#125;.spin(5); 简单介绍下，这段的意思是执行handle()里面的方法，并且设置了5次重试限制。然后我们再来看看AbstractSpinBusiness这个抽象类AbstractSpinBusiness.class 1234567891011121314151617181920212223import org.apache.log4j.Logger;public abstract class AbstractSpinBusiness &#123; private Logger logger = Logger.getLogger(this.getClass()); public void spin(int times)&#123; for(int i = 0; i &lt; times; i++)&#123; if(handle())&#123; return; &#125; logger.debug(String.format(&quot;spin重试%s&quot;, i)); &#125; &#125; /** * 执行主体 * @return true:执行成功,不需要重试 false:执行失败 */ protected abstract boolean handle();&#125; 看到这里，好像也不过只是对AbstractSpinBusiness当中的handle的实现，并且运用在spin方法当中。可能细心的同学已经发现了这使用了模板的设计模式，如果能够发现，那么给你点个赞；如果没能发现，问题也不大，因为我在这里也并非是来讲模板设计模式。当然，模板设计模式也是十分重要且优秀的写法，在抽象业务、架构当中用的是遍地开花！ 那么这个写法很优雅吗回想一下我们最早学习JDBC的时候，我们需要手动获取Connection，需要将参数设置到PreparedStatement当中，执行之后需要将对象再包装成我们想要的数据格式，这一系列的操作下来，我们可以发现，真正跟业务相贴切的就只是那一条SQL而已，其他的工作都只是一个辅助工作。 所以，像MyBatis、Hibernate等这类ORM框架才会孕育而生。开发人员在使用这些框架的时候，只需要关心我们自己的业务。例如MyBatis，我们只需要写好业务的SQL以及对应的Mapper，那么整合到业务的Service当中就可以，而其他的操作已经封装在框架中无感知执行。 回归到我们刚开始的那段代码当中。不难发现这简单的代码中，其实蕴含着同样的思想，那就是将业务代码和非业务代码独立开来。试想，如果有其他地方也需要使用类似的重试逻辑，那么是否又需要写一套重试的代码呢？ 扩展沿着这样的思路，在最近一次优化中使用了相同的写法。目前系统中存在一些慢SQL，SQL的本身是比较简单，EXPLAIN执行计划当中也没有什么问题，就只是单纯的rows比较多。问题在于业务中产生大量的参数，导致in里面的数据太多，造成SQL执行效率变低。那么比较直接的优化就是控制这里的参数，进行分批处理。（当然这里就不考虑网上说的子查询或者是eq_range_index_dive_limit参数之类） 要是你会怎么写要是没有前面的引子，我想大家的代码大概会是这样 123456789101112131415161718192021222324252627282930313233343536import com.google.common.collect.Lists;import java.util.List;public class Test &#123; public static final int PARTITION_SIZE = 1000; public static void main(String[] args) &#123; // 这里就模拟是业务参数 List&lt;Long&gt; paramIds = Lists.newArrayList(1L,2L,3L); // 进行分隔 List&lt;List&lt;Long&gt;&gt; partitionParamIds = Lists.partition(paramIds, PARTITION_SIZE); List&lt;Object&gt; resultList = Lists.newArrayListWithExpectedSize(paramIds.size()); partitionParamIds.forEach(partition -&gt; &#123; // 执行具体的DAO操作，当然这里也是模拟 resultList.addAll(new ObjectDao().getList(partition)); &#125;); System.out.println(resultList.size()); &#125; &#125;class ObjectDao &#123; // 都说了是模拟模拟，不要挑刺了 public List&lt;Object&gt; getList(List&lt;Long&gt; paramIds) &#123; List&lt;Object&gt; resultList = Lists.newArrayList(); for (Long paramId : paramIds) &#123; resultList.add(paramId); &#125; return resultList; &#125; &#125; 其实这样写本身也是比较简单整洁的，但是有没有发现，这里切片的动作和具体的业务代码还是混杂在一起，做不到一定意义上的职责分明。那是不是可以提供一个辅助类来做这些事情呢，所以我改写下。 1234567891011121314151617181920212223242526272829import com.google.common.collect.Lists;import java.util.List;public class Test &#123; public static void main(String[] args) &#123; // 这里就模拟是业务参数 List&lt;Long&gt; paramIds = Lists.newArrayList(1L,2L,3L); List&lt;Object&gt; resultList = new CommonDoPartition&lt;&gt;().partitionToQuery(paramIds, partition -&gt; new ObjectDao().getList(partition)); System.out.println(resultList.size()); &#125;&#125;class ObjectDao &#123; // 都说了是模拟模拟，不要挑刺了 public List&lt;Object&gt; getList(List&lt;Long&gt; paramIds) &#123; List&lt;Object&gt; resultList = Lists.newArrayList(); for (Long paramId : paramIds) &#123; resultList.add(paramId); &#125; return resultList; &#125;&#125; 这里用到了一个CommonDoPartition类，我们来看下它是怎么实现的CommonDoPartition.java 1234567891011121314151617181920212223242526272829303132333435import com.google.common.collect.Lists;import org.apache.commons.collections.CollectionUtils;import org.apache.log4j.Logger;import java.util.List;import java.util.function.Function;public class CommonDoPartition&lt;T&gt; &#123; private final static Logger logger = Logger.getLogger(CommonDoPartition.class); public static final int PARTITION_SIZE = 1000; public &lt;T, R&gt; List&lt;R&gt; partitionToQuery(int partitionSize, List&lt;T&gt; all, Function&lt;List&lt;T&gt;, List&lt;R&gt;&gt; function) &#123; if (CollectionUtils.isEmpty(all)) &#123; logger.warn(&quot;no data to query&quot;); return Lists.newArrayList(); &#125; List&lt;List&lt;T&gt;&gt; partitions = Lists.partition(all, partitionSize); List&lt;R&gt; result = Lists.newArrayList(); for (List&lt;T&gt; list : partitions) &#123; List&lt;R&gt; resultList = function.apply(list); if (!CollectionUtils.isEmpty(resultList)) &#123; result.addAll(resultList); &#125; &#125; return result; &#125; public &lt;T, R&gt; List&lt;R&gt; partitionToQuery(List&lt;T&gt; all, Function&lt;List&lt;T&gt;, List&lt;R&gt;&gt; function) &#123; return this.partitionToQuery(PARTITION_SIZE, all, function); &#125;&#125; 可以看到，分片的操作放到了这个公共方法当中，于是业务方只需要用lambda表达式支持他想要的业务逻辑就可以了，非业务性质工作都可以由这个工具类来完成。 再来扩展一下既然实现了查询操作，同样也可以搞一下执行操作 12345678910111213141516171819202122232425262728293031323334public void partitionToDo(int partitionSize, List&lt;T&gt; all, Consumer&lt;List&lt;T&gt;&gt; consumer) &#123; if (CollectionUtils.isEmpty(all)) &#123; logger.warn(&quot;no data to consume&quot;); return; &#125; List&lt;List&lt;T&gt;&gt; partitions = Lists.partition(all, partitionSize); for (List&lt;T&gt; list : partitions) &#123; consumer.accept(list); &#125;&#125;public void partitionToDo(List&lt;T&gt; all, Consumer&lt;List&lt;T&gt;&gt; consumer) &#123; this.partitionToDo(PARTITION_SIZE, all, consumer);&#125;public &lt;T, R&gt; void partitionToQueryAndDo(int partitionSize, List&lt;T&gt; all, Function&lt;List&lt;T&gt;, List&lt;R&gt;&gt; function, Consumer&lt;List&lt;R&gt;&gt; consumer) &#123; if (CollectionUtils.isEmpty(all)) &#123; logger.warn(&quot;no data to consume&quot;); return; &#125; List&lt;List&lt;T&gt;&gt; partitions = Lists.partition(all, partitionSize); List&lt;R&gt; resultList; for (List&lt;T&gt; list : partitions) &#123; resultList = function.apply(list); consumer.accept(resultList); &#125;&#125;public &lt;T, R&gt; void partitionToQueryAndDo(List&lt;T&gt; all, Function&lt;List&lt;T&gt;, List&lt;R&gt;&gt; function, Consumer&lt;List&lt;R&gt;&gt; consumer) &#123; this.partitionToQueryAndDo(PARTITION_SIZE, all, function, consumer);&#125; 这里的partitionToDo是分批去执行某些任务，partitionToQueryAndDo是结合了之前的分批查询某些数据，并且对这些数据进行操作。这些都是可以组合起来的例子。 结尾当然，本人也能力有限，也不见得能将大多数的场景进行抽象、组合、归纳，只是觉得在平时的开发中，光写业务光写代码，缺少了自己的思考以及那些优秀的设计思路和理念的话，总归还是无法达到自我提升的程度。本文也只是我在平时工作中的一些小小思考，也还算是一点小小的总结，也仅供大家参考。","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://showyool.github.io/tags/Java/"}]},{"title":"不是吧，还有人不知道三目运算符的BUG","slug":"6872738517798584328","date":"2020-09-15T07:39:49.000Z","updated":"2020-10-22T08:48:24.403Z","comments":true,"path":"2020/09/15/6872738517798584328/","link":"","permalink":"https://showyool.github.io/2020/09/15/6872738517798584328/","excerpt":"","text":"三目运算符一直是众多开发者信手拈来的一种写法，它简化了if-else的臃肿的写法，而是用一行代码替代，就感觉无形之中秀了一把。殊不知，这么帅气的代码也暗藏着一个BUG。 缘由头天晚上发布了一个功能，本以为是波澜不惊的一个需求，结果第二天kibana打出了成吨的NPE日志。这些NPE日志大多都不约而同都指向了我写的一行代码，我立马推了下我的眼镜，开始排查起来了。 问题代码Kibana的堆栈日志定位在第899行。 1resultMap.put(&quot;unAuditPurchaseOrder&quot;, switchConf == null ? 0 : switchConf.getUnAuditPurchaseOrder()); 1.检查了resultMap，它在上面有实例化，不可能为空。2.检查switchConf，但是在这里有判空，也不会报错。那是怎么回事？？？？ 继续排查既然肉眼看不出，那么只能找一台测试机，用一下Arthas看一下具体的情况。（线上慎用，因为可能会造成卡顿） 1trace com.aaa.bbb.ccc.ddd.eee.CustomerButtonService getPurchaseConfig -n 5 &#x27;1==1&#x27; --skipJDKMethod false 果然，这里就发现了端倪。这里竟然执行了intValue()！也就是说如果switchConf.getUnAuditPurchaseOrder()这个是null，那么就很明显发生了NPE。 看一下字节码为了显现效果，我换一个简单的程序 123456789public class Test &#123; public static void main(String[] args) &#123; Integer i = null; System.out.println(1 != 1 ? 0 : i); &#125;&#125; 定位到class文件目录，执行 1javap -c -l Test 然后我又改了一下程序 123456789public class Test &#123; public static void main(String[] args) &#123; Integer i = null; System.out.println(1 == 1 ? 0 : i); &#125;&#125; 这次运行并不会报错，看一下它的JVM指令:因为三目运算符的结果是前者的逻辑，即返回一个常量0。 解释由上面的实验可以发现，JVM在解释三目运算符的时候，会对两个逻辑语句进行数据类型校验，按照基本数据类型为准。实验中，数据类型是基本数据类型，所以，如果逻辑走到了后者，那么就会进行自动的拆箱。这个隐式的操作就是造成这个BUG的原因。 解决既然知道原因了，那么只要统一数据类型就行： 123456789public class Test &#123; public static void main(String[] args) &#123; Integer i = null; System.out.println(1 != 1 ? new Integer(0) : i); &#125;&#125; 然后按照惯例，我们还是看一下他的JVM指令: 拾遗后来在无意之中发现，原来这个例子在《阿里巴巴开发手册》当中也有被记录其实说的也是一回事情！ 后续最后,虽然问题是解决了，但我还是被测试同学记录了一下黑名单，这锅得背~","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://showyool.github.io/tags/Java/"}]}],"categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://showyool.github.io/tags/Java/"}]}