<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Showyool&#39;s Blog</title>
  
  
  <link href="https://showyool.github.io/atom.xml" rel="self"/>
  
  <link href="https://showyool.github.io/"/>
  <updated>2020-10-22T18:43:51.693Z</updated>
  <id>https://showyool.github.io/</id>
  
  <author>
    <name>Showyool</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>这可能是你从未见过如此优雅的写法</title>
    <link href="https://showyool.github.io/2020/09/22/6875124241813995533/"/>
    <id>https://showyool.github.io/2020/09/22/6875124241813995533/</id>
    <published>2020-09-21T17:53:52.000Z</published>
    <updated>2020-10-22T18:43:51.693Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>看到这样的标题，第一反应是不是那个“渣渣辉”在电脑屏幕中挥舞着大砍刀，听着古天乐说着，“这是你从未玩过的全新版本”。当然，这并不是标题党，既然“这是你从未玩过的全新版本”，那么“是兄弟就来看我的文章”。（不是兄弟也请留步，嘤嘤嘤）<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/809dadaa2a94491cac5be25e641066b5~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在对公司一个几百年没有更新维护旧项目进行功能开发的时候，由于当初开发这个项目的人早已各奔前程，也没有留下什么可视性的文档，所以只能从一些代码以及注释中尽可能地摸索这个项目的系统架构以及对应的业务功能，这无疑是一件十分头疼的事情（看别人的代码和看几个月前自己的代码就像是闻SHI一样）。<br /><br>看了几遍下来，大多数的代码写的都不堪直视，甚至连基本的格式化代码也没有，但是其中有一段的代码却引起了我的注意，也是因为这段代码才引起了我的思考，也是就有了这篇文章。</p><h2 id="到底是什么样的代码呢"><a href="#到底是什么样的代码呢" class="headerlink" title="到底是什么样的代码呢"></a>到底是什么样的代码呢</h2><p>话不多说，直接上代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> AbstractSpinBusiness() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CompanyProfile updateProfile = getProfileForUpdateConf(staff, attrMap);</span><br><span class="line">        <span class="keyword">return</span> companyProfileDao.updateCompanyProfileConf(updateProfile) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.spin(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>简单介绍下，这段的意思是执行handle()里面的方法，并且设置了5次重试限制。<br /><br>然后我们再来看看AbstractSpinBusiness这个抽象类<br /><br><strong>AbstractSpinBusiness.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSpinBusiness</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = Logger.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">spin</span><span class="params">(<span class="keyword">int</span> times)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; times; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(handle())&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            logger.debug(String.format(<span class="string">&quot;spin重试%s&quot;</span>, i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行主体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true:执行成功,不需要重试  false:执行失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">handle</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里，好像也不过只是对AbstractSpinBusiness当中的handle的实现，并且运用在spin方法当中。可能细心的同学已经发现了这使用了模板的设计模式，如果能够发现，那么给你点个赞；如果没能发现，问题也不大，因为我在这里也并非是来讲模板设计模式。当然，模板设计模式也是十分重要且优秀的写法，在抽象业务、架构当中用的是遍地开花！</p><h2 id="那么这个写法很优雅吗"><a href="#那么这个写法很优雅吗" class="headerlink" title="那么这个写法很优雅吗"></a>那么这个写法很优雅吗</h2><p>回想一下我们最早学习JDBC的时候，我们需要手动获取Connection，需要将参数设置到PreparedStatement当中，执行之后需要将对象再包装成我们想要的数据格式，这一系列的操作下来，我们可以发现，真正跟业务相贴切的就只是那一条SQL而已，其他的工作都只是一个辅助工作。<br /><br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a2c842956c8485697fae3a9a041eeca~tplv-k3u1fbpfcp-zoom-1.image"></p><p>所以，像MyBatis、Hibernate等这类ORM框架才会孕育而生。开发人员在使用这些框架的时候，只需要关心我们自己的业务。例如MyBatis，我们只需要写好业务的SQL以及对应的Mapper，那么整合到业务的Service当中就可以，而其他的操作已经封装在框架中无感知执行。<br /></p><p>回归到我们刚开始的那段代码当中。不难发现这简单的代码中，其实蕴含着同样的思想，那就是将业务代码和非业务代码独立开来。试想，如果有其他地方也需要使用类似的重试逻辑，那么是否又需要写一套重试的代码呢？<br /><br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30231d3b92a3400582939fd642bf35c9~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>沿着这样的思路，在最近一次优化中使用了相同的写法。<br />目前系统中存在一些慢SQL，SQL的本身是比较简单，EXPLAIN执行计划当中也没有什么问题，就只是单纯的rows比较多。问题在于业务中产生大量的参数，导致in里面的数据太多，造成SQL执行效率变低。那么比较直接的优化就是控制这里的参数，进行分批处理。（当然这里就不考虑网上说的子查询或者是eq_range_index_dive_limit参数之类）<br><br /></p><h2 id="要是你会怎么写"><a href="#要是你会怎么写" class="headerlink" title="要是你会怎么写"></a>要是你会怎么写</h2><p>要是没有前面的引子，我想大家的代码大概会是这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PARTITION_SIZE = <span class="number">1000</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 这里就模拟是业务参数</span></span><br><span class="line">        List&lt;Long&gt; paramIds = Lists.newArrayList(<span class="number">1L</span>,<span class="number">2L</span>,<span class="number">3L</span>);</span><br><span class="line">        <span class="comment">// 进行分隔</span></span><br><span class="line">        List&lt;List&lt;Long&gt;&gt; partitionParamIds = Lists.partition(paramIds, PARTITION_SIZE);</span><br><span class="line">        List&lt;Object&gt; resultList = Lists.newArrayListWithExpectedSize(paramIds.size());</span><br><span class="line">        partitionParamIds.forEach(partition -&gt; &#123;</span><br><span class="line">            <span class="comment">// 执行具体的DAO操作，当然这里也是模拟</span></span><br><span class="line">            resultList.addAll(<span class="keyword">new</span> ObjectDao().getList(partition));</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(resultList.size());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectDao</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 都说了是模拟模拟，不要挑刺了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getList</span><span class="params">(List&lt;Long&gt; paramIds)</span> </span>&#123;</span><br><span class="line">        List&lt;Object&gt; resultList = Lists.newArrayList();</span><br><span class="line">        <span class="keyword">for</span> (Long paramId : paramIds) &#123;</span><br><span class="line">            resultList.add(paramId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这样写本身也是比较简单整洁的，但是有没有发现，这里切片的动作和具体的业务代码还是混杂在一起，做不到一定意义上的职责分明。那是不是可以提供一个辅助类来做这些事情呢，所以我改写下。<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dbdb46fc19004aaaaf86aef31dcb75ba~tplv-k3u1fbpfcp-zoom-1.image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里就模拟是业务参数</span></span><br><span class="line">        List&lt;Long&gt; paramIds = Lists.newArrayList(<span class="number">1L</span>,<span class="number">2L</span>,<span class="number">3L</span>);</span><br><span class="line">        List&lt;Object&gt; resultList = <span class="keyword">new</span> CommonDoPartition&lt;&gt;().partitionToQuery(paramIds,</span><br><span class="line">                partition -&gt; <span class="keyword">new</span> ObjectDao().getList(partition));</span><br><span class="line">        System.out.println(resultList.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 都说了是模拟模拟，不要挑刺了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getList</span><span class="params">(List&lt;Long&gt; paramIds)</span> </span>&#123;</span><br><span class="line">        List&lt;Object&gt; resultList = Lists.newArrayList();</span><br><span class="line">        <span class="keyword">for</span> (Long paramId : paramIds) &#123;</span><br><span class="line">            resultList.add(paramId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用到了一个CommonDoPartition类，我们来看下它是怎么实现的<br /><br><strong>CommonDoPartition.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonDoPartition</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(CommonDoPartition.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PARTITION_SIZE = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T, R&gt; <span class="function">List&lt;R&gt; <span class="title">partitionToQuery</span><span class="params">(<span class="keyword">int</span> partitionSize, List&lt;T&gt; all, Function&lt;List&lt;T&gt;, List&lt;R&gt;&gt; function)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(all)) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;no data to query&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> Lists.newArrayList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;T&gt;&gt; partitions = Lists.partition(all, partitionSize);</span><br><span class="line">        List&lt;R&gt; result = Lists.newArrayList();</span><br><span class="line">        <span class="keyword">for</span> (List&lt;T&gt; list : partitions) &#123;</span><br><span class="line">            List&lt;R&gt; resultList = function.apply(list);</span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(resultList)) &#123;</span><br><span class="line">                result.addAll(resultList);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T, R&gt; <span class="function">List&lt;R&gt; <span class="title">partitionToQuery</span><span class="params">(List&lt;T&gt; all, Function&lt;List&lt;T&gt;, List&lt;R&gt;&gt; function)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.partitionToQuery(PARTITION_SIZE, all, function);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，分片的操作放到了这个公共方法当中，于是业务方只需要用lambda表达式支持他想要的业务逻辑就可以了，非业务性质工作都可以由这个工具类来完成。</p><h2 id="再来扩展一下"><a href="#再来扩展一下" class="headerlink" title="再来扩展一下"></a>再来扩展一下</h2><p>既然实现了查询操作，同样也可以搞一下执行操作<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f42e23cc29f4f11960db9194a4ba204~tplv-k3u1fbpfcp-zoom-1.image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">partitionToDo</span><span class="params">(<span class="keyword">int</span> partitionSize, List&lt;T&gt; all, Consumer&lt;List&lt;T&gt;&gt; consumer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(all)) &#123;</span><br><span class="line">        logger.warn(<span class="string">&quot;no data to consume&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;T&gt;&gt; partitions = Lists.partition(all, partitionSize);</span><br><span class="line">    <span class="keyword">for</span> (List&lt;T&gt; list : partitions) &#123;</span><br><span class="line">        consumer.accept(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">partitionToDo</span><span class="params">(List&lt;T&gt; all, Consumer&lt;List&lt;T&gt;&gt; consumer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.partitionToDo(PARTITION_SIZE, all, consumer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T, R&gt; <span class="function"><span class="keyword">void</span> <span class="title">partitionToQueryAndDo</span><span class="params">(<span class="keyword">int</span> partitionSize, List&lt;T&gt; all, Function&lt;List&lt;T&gt;, List&lt;R&gt;&gt; function, Consumer&lt;List&lt;R&gt;&gt; consumer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(all)) &#123;</span><br><span class="line">        logger.warn(<span class="string">&quot;no data to consume&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;T&gt;&gt; partitions = Lists.partition(all, partitionSize);</span><br><span class="line">    List&lt;R&gt; resultList;</span><br><span class="line">    <span class="keyword">for</span> (List&lt;T&gt; list : partitions) &#123;</span><br><span class="line">        resultList = function.apply(list);</span><br><span class="line">        consumer.accept(resultList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T, R&gt; <span class="function"><span class="keyword">void</span> <span class="title">partitionToQueryAndDo</span><span class="params">(List&lt;T&gt; all, Function&lt;List&lt;T&gt;, List&lt;R&gt;&gt; function, Consumer&lt;List&lt;R&gt;&gt; consumer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.partitionToQueryAndDo(PARTITION_SIZE, all, function, consumer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的partitionToDo是分批去执行某些任务，partitionToQueryAndDo是结合了之前的分批查询某些数据，并且对这些数据进行操作。这些都是可以组合起来的例子。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>当然，本人也能力有限，也不见得能将大多数的场景进行抽象、组合、归纳，只是觉得在平时的开发中，光写业务光写代码，缺少了自己的思考以及那些优秀的设计思路和理念的话，总归还是无法达到自我提升的程度。本文也只是我在平时工作中的一些小小思考，也还算是一点小小的总结，也仅供大家参考。<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/91468e5a44a14a55b29ad560d44f4b5a~tplv-k3u1fbpfcp-zoom-1.image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;看到这样的标题，第一反应是不是那个“渣渣辉”在电脑屏幕中挥舞着大砍刀，听着古天乐说着，“这是你从未玩过的全新版本”。当然，这并不是标题党，既</summary>
      
    
    
    
    
    <category term="Java" scheme="https://showyool.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>不是吧，还有人不知道三目运算符的BUG</title>
    <link href="https://showyool.github.io/2020/09/15/6872738517798584328/"/>
    <id>https://showyool.github.io/2020/09/15/6872738517798584328/</id>
    <published>2020-09-15T07:39:49.000Z</published>
    <updated>2020-10-22T08:48:24.403Z</updated>
    
    <content type="html"><![CDATA[<p>三目运算符一直是众多开发者信手拈来的一种写法，它简化了if-else的臃肿的写法，而是用一行代码替代，就感觉无形之中秀了一把。<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9088deb2a1d64625b0d1a9928c5e5687~tplv-k3u1fbpfcp-zoom-1.image"><br>殊不知，这么帅气的代码也暗藏着一个BUG。</p><h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>头天晚上发布了一个功能，本以为是波澜不惊的一个需求，结果第二天kibana打出了成吨的NPE日志。这些NPE日志大多都不约而同都指向了我写的一行代码，我立马推了下我的眼镜，开始排查起来了。<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1962e052977442ca94f8ccae01dfb9b8~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="问题代码"><a href="#问题代码" class="headerlink" title="问题代码"></a>问题代码</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd4d15e03a6648a9836527c0b86e9645~tplv-k3u1fbpfcp-zoom-1.image"><br>Kibana的堆栈日志定位在第899行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resultMap.put(<span class="string">&quot;unAuditPurchaseOrder&quot;</span>, switchConf == <span class="keyword">null</span> ? <span class="number">0</span> : switchConf.getUnAuditPurchaseOrder());</span><br></pre></td></tr></table></figure><p>1.检查了resultMap，它在上面有实例化，不可能为空。<br /><br>2.检查switchConf，但是在这里有判空，也不会报错。<br>那是怎么回事？？？？<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3401cb5ca9f140e98b87b151f8d2649f~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="继续排查"><a href="#继续排查" class="headerlink" title="继续排查"></a>继续排查</h2><p>既然肉眼看不出，那么只能找一台测试机，用一下Arthas看一下具体的情况。（线上慎用，因为可能会造成卡顿）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trace com.aaa.bbb.ccc.ddd.eee.CustomerButtonService getPurchaseConfig -n 5 &#x27;1==1&#x27; --skipJDKMethod false</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a20156d1b7c149f18c83f97303ff348e~tplv-k3u1fbpfcp-zoom-1.image"><br>果然，这里就发现了端倪。<br>这里竟然执行了intValue()！也就是说如果<code>switchConf.getUnAuditPurchaseOrder()</code>这个是null，那么就很明显发生了NPE。</p><h2 id="看一下字节码"><a href="#看一下字节码" class="headerlink" title="看一下字节码"></a>看一下字节码</h2><p>为了显现效果，我换一个简单的程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer i = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="number">1</span> != <span class="number">1</span> ? <span class="number">0</span> : i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定位到class文件目录，执行</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -c -l <span class="keyword">Test</span></span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a54e3c77b9874d86a6efb6b4e50db067~tplv-k3u1fbpfcp-zoom-1.image"></p><p>然后我又改了一下程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer i = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="number">1</span> == <span class="number">1</span> ? <span class="number">0</span> : i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次运行并不会报错，看一下它的JVM指令:<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cfd72f4a137240e4865a0774bd43e19a~tplv-k3u1fbpfcp-zoom-1.image"><br>因为三目运算符的结果是前者的逻辑，即返回一个常量0。</p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>由上面的实验可以发现，JVM在解释三目运算符的时候，会对两个逻辑语句进行数据类型校验，按照基本数据类型为准。实验中，数据类型是基本数据类型，所以，如果逻辑走到了后者，那么就会进行自动的拆箱。这个隐式的操作就是造成这个BUG的原因。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f078e9ebc9344138bb678036c14c79fc~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>既然知道原因了，那么只要统一数据类型就行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer i = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="number">1</span> != <span class="number">1</span> ? <span class="keyword">new</span> Integer(<span class="number">0</span>) : i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后按照惯例，我们还是看一下他的JVM指令:<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/007ce4e40961419dae7a9c9f3e92e454~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="拾遗"><a href="#拾遗" class="headerlink" title="拾遗"></a>拾遗</h2><p>后来在无意之中发现，原来这个例子在《阿里巴巴开发手册》当中也有被记录<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2146b099ffdf4abfa82fe526187b8547~tplv-k3u1fbpfcp-zoom-1.image"><br>其实说的也是一回事情！<br /></p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>最后,虽然问题是解决了，但我还是被测试同学记录了一下黑名单，这锅得背~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;三目运算符一直是众多开发者信手拈来的一种写法，它简化了if-else的臃肿的写法，而是用一行代码替代，就感觉无形之中秀了一把。&lt;br&gt;&lt;img src=&quot;https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9088deb2a1</summary>
      
    
    
    
    
    <category term="Java" scheme="https://showyool.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
