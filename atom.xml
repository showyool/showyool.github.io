<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Showyool&#39;s Blog</title>
  
  
  <link href="https://showyool.github.io/atom.xml" rel="self"/>
  
  <link href="https://showyool.github.io/"/>
  <updated>2020-10-22T08:48:24.403Z</updated>
  <id>https://showyool.github.io/</id>
  
  <author>
    <name>Showyool</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不是吧，还有人不知道三目运算符的BUG</title>
    <link href="https://showyool.github.io/2020/09/15/6872738517798584328/"/>
    <id>https://showyool.github.io/2020/09/15/6872738517798584328/</id>
    <published>2020-09-15T07:39:49.000Z</published>
    <updated>2020-10-22T08:48:24.403Z</updated>
    
    <content type="html"><![CDATA[<p>三目运算符一直是众多开发者信手拈来的一种写法，它简化了if-else的臃肿的写法，而是用一行代码替代，就感觉无形之中秀了一把。<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9088deb2a1d64625b0d1a9928c5e5687~tplv-k3u1fbpfcp-zoom-1.image"><br>殊不知，这么帅气的代码也暗藏着一个BUG。</p><h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>头天晚上发布了一个功能，本以为是波澜不惊的一个需求，结果第二天kibana打出了成吨的NPE日志。这些NPE日志大多都不约而同都指向了我写的一行代码，我立马推了下我的眼镜，开始排查起来了。<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1962e052977442ca94f8ccae01dfb9b8~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="问题代码"><a href="#问题代码" class="headerlink" title="问题代码"></a>问题代码</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd4d15e03a6648a9836527c0b86e9645~tplv-k3u1fbpfcp-zoom-1.image"><br>Kibana的堆栈日志定位在第899行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resultMap.put(<span class="string">&quot;unAuditPurchaseOrder&quot;</span>, switchConf == <span class="keyword">null</span> ? <span class="number">0</span> : switchConf.getUnAuditPurchaseOrder());</span><br></pre></td></tr></table></figure><p>1.检查了resultMap，它在上面有实例化，不可能为空。<br /><br>2.检查switchConf，但是在这里有判空，也不会报错。<br>那是怎么回事？？？？<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3401cb5ca9f140e98b87b151f8d2649f~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="继续排查"><a href="#继续排查" class="headerlink" title="继续排查"></a>继续排查</h2><p>既然肉眼看不出，那么只能找一台测试机，用一下Arthas看一下具体的情况。（线上慎用，因为可能会造成卡顿）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trace com.aaa.bbb.ccc.ddd.eee.CustomerButtonService getPurchaseConfig -n 5 &#x27;1==1&#x27; --skipJDKMethod false</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a20156d1b7c149f18c83f97303ff348e~tplv-k3u1fbpfcp-zoom-1.image"><br>果然，这里就发现了端倪。<br>这里竟然执行了intValue()！也就是说如果<code>switchConf.getUnAuditPurchaseOrder()</code>这个是null，那么就很明显发生了NPE。</p><h2 id="看一下字节码"><a href="#看一下字节码" class="headerlink" title="看一下字节码"></a>看一下字节码</h2><p>为了显现效果，我换一个简单的程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer i = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="number">1</span> != <span class="number">1</span> ? <span class="number">0</span> : i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定位到class文件目录，执行</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -c -l <span class="keyword">Test</span></span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a54e3c77b9874d86a6efb6b4e50db067~tplv-k3u1fbpfcp-zoom-1.image"></p><p>然后我又改了一下程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer i = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="number">1</span> == <span class="number">1</span> ? <span class="number">0</span> : i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次运行并不会报错，看一下它的JVM指令:<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cfd72f4a137240e4865a0774bd43e19a~tplv-k3u1fbpfcp-zoom-1.image"><br>因为三目运算符的结果是前者的逻辑，即返回一个常量0。</p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>由上面的实验可以发现，JVM在解释三目运算符的时候，会对两个逻辑语句进行数据类型校验，按照基本数据类型为准。实验中，数据类型是基本数据类型，所以，如果逻辑走到了后者，那么就会进行自动的拆箱。这个隐式的操作就是造成这个BUG的原因。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f078e9ebc9344138bb678036c14c79fc~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>既然知道原因了，那么只要统一数据类型就行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer i = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="number">1</span> != <span class="number">1</span> ? <span class="keyword">new</span> Integer(<span class="number">0</span>) : i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后按照惯例，我们还是看一下他的JVM指令:<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/007ce4e40961419dae7a9c9f3e92e454~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="拾遗"><a href="#拾遗" class="headerlink" title="拾遗"></a>拾遗</h2><p>后来在无意之中发现，原来这个例子在《阿里巴巴开发手册》当中也有被记录<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2146b099ffdf4abfa82fe526187b8547~tplv-k3u1fbpfcp-zoom-1.image"><br>其实说的也是一回事情！<br /></p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>最后,虽然问题是解决了，但我还是被测试同学记录了一下黑名单，这锅得背~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;三目运算符一直是众多开发者信手拈来的一种写法，它简化了if-else的臃肿的写法，而是用一行代码替代，就感觉无形之中秀了一把。&lt;br&gt;&lt;img src=&quot;https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9088deb2a1</summary>
      
    
    
    
    
    <category term="Java" scheme="https://showyool.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
